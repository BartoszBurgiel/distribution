{"version":3,"sources":["components/sketchOnly.js","components/mathFormula.js","components/formToCalculate.js","math/distribution.js","display/bar.js","display/data.js","math/binomial.js","display/hoverInfo.js","display/labeling.js","binomial/graph.js","binomial/createGraph.js","math/normal.js","normal/graph.js","normal/createGraph.js","cBinomial/graph.js","cBinomial/createGraph.js","components/menu.js","components/menuElement.js","App.js","serviceWorker.js","index.js"],"names":["SketchOnly","sketch","this","props","nVal","pVal","kVal","slider","React","Component","MathFormula","assembleFormula","n","p","k","v","Math","round","eV","eqType","math","FromToCalculate","state","className","type","min","onChange","e","setState","target","value","name","max","step","Distribution","standardDeviation","sqrt","expectedValue","variance","pow","Bar","xPos","yPos","width","height","prop","col","fill","rect","Data","x","y","labels","Map","stroke","textSize","text","i","noStroke","key","val","size","set","Binomial","bDistribution","binomialCoef","factorial","binomMostCommon","sD","ceil","floor","sum","cumulatedBinom","HoverInfo","bars","showHoverWindow","mouseX","mouseY","forEach","element","showHoverWindowNormal","Labeling","xAxisNormal","range","line","xAxisNormalSteps","map","labelXAxis","labelYAxis","maxProp","yRange","strokeWeight","inbetweenSteps","upperBond","stepProp","stepPropPos","binomialDistributionGraph","myCustomRedrawAccordingToNewPropsHandler","parseInt","parseFloat","nValue","pValue","kValue","canvas","nBar","pBar","yRangeBar","kBar","distributionMath","binomialMath","hoverInfo","labeling","dataDisplay","createCanvas","createSlider","position","draw","background","mu","sigma","variace","mostCommonValues","addLabel","display","highestProp","currentPropability","absHeight","sliderYPosition","windowResized","createGraph","Normal","solve","coef","PI","power","E","normalDistributionGraph","normalMath","x1","y1","x2","y2","hoverMousePos","cumulatedBinomialDistributionGraph","propSum","Menu","render","children","MenuElement","onClick","App","useState","Boolean","pgNormal","setPgNormal","pgBinom","setPgBinom","pgcBinom","setPgcBinom","formNormal","setFormNormal","formBinom","setFormBinom","formcBinom","setFormcBinom","resetAllStateVariables","handleOnclick","compName","console","log","bind","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.995b789f.chunk.js","sourcesContent":["import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\n\nexport default class SketchOnly extends React.Component {\n    render() {\n        return (\n            <>\n                <P5Wrapper sketch={this.props.sketch}  nVal={this.props.nVal} pVal={this.props.pVal} kVal={this.props.kVal} slider={true} />\n            </>\n        )\n    }\n}\n\n","import { BlockMath } from 'react-katex';\nimport 'katex/dist/katex.min.css';\nimport React from 'react';\n\n\nexport default class MathFormula extends React.Component {\n    \n    assembleFormula = () => {\n\n        // Create variables to clean up the templates\n        let n = this.props.nVal\n        let p = this.props.pVal\n        let k = this.props.kVal\n\n        let v = Math.round(n * p * (1 - p) * 10 ) / 10\n        let eV = Math.round(n * p * 10 ) / 10\n\n\n        // Check props\n        switch (this.props.eqType) {\n            case 'cBinom':\n                return <BlockMath math={`P(X \\\\le k) = \\\\sum_{k=0}^{${n}} \\\\Big[\\\\binom{${n}}{k} * {${p}}^{k} * (1-{${p}})^{${n}-k}\\\\Big]`} />\n            case 'binom':\n                return <BlockMath math={`P(X = ${k}) = \\\\binom{${n}}{${k}} * {${p}}^{${k}} * (1-{${p}})^{${n}-${k}}`} />\n            case 'normal':\n                return <BlockMath math={`P(x) = \\\\frac{1}{\\\\sqrt{2\\\\pi ${v}}}e^{\\\\frac{-(x-${eV})}{2${v}}}`} />\n            default:\n        }\n    }\n\n    render() {\n        return this.assembleFormula()\n    }\n}","import React from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport MathFormula from './mathFormula.js';\nimport '../assets/style/form.css';\n\n\nexport default class FromToCalculate extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            nVal: 100,\n            kVal: 50,\n            pVal: 0.5,\n        }\n    }\n\n    render() {\n        return (\n            <>\n            <div className=\"main-funciton-display\">\n                <div className=\"container column\">\n                    <MathFormula eqType={this.props.eqType} nVal={this.state.nVal} pVal={this.state.pVal} kVal={this.state.kVal} />\n                    <P5Wrapper sketch={this.props.sketch} nVal={this.state.nVal} pVal={this.state.pVal} kVal={this.state.kVal} slider={false} />\n                </div>\n\n                <div className=\"container row\">\n                    <div className=\"container-element\">\n                            <label>n: </label>\n                            <input\n                                type=\"number\"\n                                min=\"1\"\n                                onChange={e => {\n                                    this.setState({\n                                        nVal: e.target.value\n                                    })\n                                }}\n                            />\n                            </div>\n                            <div className=\"container-element\">\n        \n                            <label>k: </label>\n                            <input\n                                type=\"number\"\n                                name=\"kVal\"\n                                min=\"0\"\n                                max={this.state.nVal - 1}\n                                onChange={e => {\n                                    this.setState({\n                                        kVal: e.target.value\n                                    })\n                                }}\n                            />\n                            </div>\n                            <div className=\"container-element\">\n\n                            <label>p: </label>\n                            <input\n                                type=\"number\"\n                                step=\"0.01\"\n                                name=\"pVal\"\n                                min=\"0.01\"\n                                max=\"0.99\"\n                                onChange={e => {\n                                    this.setState({\n                                        pVal: e.target.value\n                                    })\n                                }}\n                            />\n                            </div>\n                        </div>\n                </div>\n            </>\n        )\n    }\n}\n\n\n","export default class Distribution {\n\n    standardDeviation = (n, p) => {\n        return Math.sqrt(n * p * (1 - p))\n    }\n\n    expectedValue = (n, p) => {\n        return n * p\n    }\n\n    variance = (n, p) => {\n        return Math.pow(this.standardDeviation(n, p), 2)\n    }\n}\n","export default class Bar {\n\n    constructor(xPos, yPos, width, height, prop, k) {\n\n        // Position on canvas\n        this.xPos = xPos\n        this.yPos = yPos\n\n        // Dimensions\n        this.width = width\n        this.height = height\n    \n        // Bar data\n        this.prop = prop\n        this.k = k\n    }\n\n    // Draw a rect according to Bar attributes\n    display(p, col) {\n        p.fill(col)\n        p.rect(this.xPos, this.yPos, this.width, -this.height)\n        p.fill(0)\n    }\n}","// Data class will be used to create field showing given labels\nexport default class Data {\n    constructor(p, x, y, height, width) {\n        this.p = p\n\n        this.x = x\n        this.y = y\n\n        this.height = height\n        this.width = width\n\n        this.labels = new Map()\n    }\n\n    // Create rect showing all labels\n    display () {\n\n        this.p.stroke(0)\n        // Background\n        this.p.fill(255, 255, 255)\n        this.p.rect(this.x, this.y, this.width, this.height)\n\n\n        this.p.fill(0)\n        this.p.textSize(24)\n        this.p.text(\"Info\", this.x+20, this.y+30)\n        this.p.textSize(16)\n\n        // Display labels\n        let i = 0\n\n        this.p.fill(0)\n        this.p.noStroke()\n\n        //Print all lables      \n        for (let [key, val] of this.labels) {\n\n            // if Val is not a number \n            if (typeof val === 'number') {\n                this.p.text(key+' = '+Math.round(val*10000)/10000 , 10 + this.x, 70 + this.y + (this.height/this.labels.size) * 2 * i / 3 )\n            } else {                \n                this.p.text(key+' = '+val , 10 + this.x, 70 + this.y + (this.height/this.labels.size) * 2*i / 3)\n            }\n            \n            i++\n        }\n\n        this.p.stroke(0)\n        this.p.textSize(12)\n    }\n\n    addLabel(key, val) {\n        this.labels.set(key, val)\n    }\n\n}\n","export default class Binomial {\n\n    // calculate binomial distribution\n    bDistribution = (n, p, k) => {\n        return this.binomialCoef(n, k) * Math.pow(p, k) * Math.pow((1 - p), n - k)\n    }\n    \n    // calculate binomial coefficient\n    binomialCoef = (n, k) => {\n        if (k === 0) {\n            return (1)\n        }\n        return this.factorial(n) / (this.factorial(k) * this.factorial(n - k))\n    }\n\n    // get factiorial of a given integer\n    factorial = (n) => {\n        if (n === 1) {\n            return (1)\n        } else if (n === 0) {\n            return (0)\n        } else {\n            return (n * this.factorial(n - 1))\n        }\n    }\n\n    // Calculates the cumulated propability of the most common values \n    // -> expectedValue +/- standard deviation\n    binomMostCommon = (n, p, sD, eV) => {\n        let min = Math.ceil(eV - sD)\n        let max = Math.floor(eV + sD)\n\n        let sum = 0\n        \n        // Calculated the cumulated propability\n        for(let i = min; i<=max; i++) {\n            sum += this.bDistribution(n, p, i)\n        }\n\n        return sum\n    } \n\n    // Calculate cumulated binomial distribution\n    cumulatedBinom = (n, p, k) => {\n        let sum = 0\n\n        for (let i = 0; i <= k; i++) {\n            sum += this.bDistribution(n, p, i)\n        }\n\n        return sum\n    }\n}","\n// Hover info creates a small window with data about a \n// chosen bar\nexport default class HoverInfo {\n    constructor(bars, p) {\n        this.bars = bars\n        this.p = p\n    }\n\n    showHoverWindow = () => {\n        // Check x-Axis\n        if (this.p.mouseX >= 50 && this.p.mouseX <= 650) {\n\n            // Check y-Axis\n            if (this.p.mouseY <= 300 && this.p.mouseY >= 30) {\n\n                // Iterate over bars \n                this.bars.forEach(element => {\n\n                    // Check x-range\n                    if (this.p.mouseX >= element.xPos && this.p.mouseX <= element.xPos + element.width) {\n\n                        // Display only if hover over bar\n                        if (this.p.mouseY >= 300 - element.height) {\n\n                            this.p.fill(255)\n\n                            // Draw window\n                            this.p.rect(550, 20, 100, 20)\n\n                            this.p.fill(0)\n\n                            // Label \n                            this.p.noStroke()\n                            this.p.text('P(' + element.k + ') = ' + Math.round(element.prop * 10000) / 100 + '%', 560, 32.5)\n                            this.p.stroke(0)\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    showHoverWindowNormal = (x, prop) => {\n\n        // Check x-Axis\n        if (this.p.mouseX >= 50 && this.p.mouseX <= 650) {\n\n            // Check y-Axis\n            if (this.p.mouseY <= 300 && this.p.mouseY >= 30) {\n                this.p.fill(255)\n\n                // Draw window\n                this.p.rect(550, 20, 120, 20)\n\n                this.p.fill(0)\n                // Label \n                this.p.text('P(' + Math.round(x*100)/100+ ') = ' + Math.round(prop * 100000) / 1000 + '%', 560, 32.5)\n            }\n        }\n    }\n}","// This class provides labels for the x and y axies\nexport default class Labeling {\n    constructor(p) {\n        this.p = p\n    }\n\n    xAxisNormal = (xPos, yPos, width, range) => {\n        this.p.line(xPos, yPos, xPos + width, yPos)\n        this.p.noStroke()\n\n        for (let i = 0; i < range; i++) {\n\n\n            if(range < 20) {\n                this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 25, width, i), yPos + 20)\n            } else if (range < 50) {\n                \n                // Display every 5th\n                if (i % 5 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 25, width, i), yPos + 20)\n                }\n            } else if (range < 100) {\n\n                // Display every 10th\n                if (i % 10 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 25, width, i), yPos + 20)\n                }\n            } else if (range < 250) {\n\n                // Display every 25th\n                if (i % 25 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 25, width, i), yPos + 20)\n                }\n            } else if (range < 500) {\n\n                // Display every 50th\n                if (i % 50 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 50, width, i), yPos + 20)\n                }\n            } else if (range < 5000) {\n                // Display every 100th\n                if (i % 100 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 100, width, i), yPos + 20)\n                }\n            } else if (range < 10000) {\n                // Display every 1000th\n                if (i % 1000 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 100, width, i), yPos + 20)\n                }\n            } else if (range >= 10000) {\n                // Display every 1000th\n                if (i % 5000 === 0) {\n                    this.p.text(i, xPos - 8 + this.xAxisNormalSteps(range, 100, width, i), yPos + 20)\n                }\n            }\n        }\n    }\n\n    xAxisNormalSteps = (range, n, width, i) => {\n        return this.p.map(((range / n) / width) * this.p.map(i, 0, range, 0, width), 0, range / n, 0, width)\n    }\n\n    labelXAxis = (n, i, xPos, yPos) => {\n        this.p.noStroke()\n        // Display bar's label\n        if (n < 40) {\n\n            // If bigger than 9 adjust -> 2 digits are wider -> misaligment\n            if (i > 9) {\n                this.p.text(i, xPos - 4, yPos)\n            } else {\n                this.p.text(i, xPos, yPos)\n            }\n        } else if (n < 99) {\n\n            // Display every fifth\n            if (i % 5 === 0) {\n                this.p.text(i, xPos - 4, yPos)\n            }\n        } else {\n            // Display every tenth\n            if (i % 10 === 0) {\n                this.p.text(i, xPos - 4, yPos)\n            }\n        }\n        this.p.stroke(0)\n    }\n\n    labelYAxis = (xPos, yPos, width, height, maxProp, yRange) => {\n\n        // Axis line\n        this.p.strokeWeight(1.5)\n        this.p.stroke(0)\n        this.p.line(xPos, yPos, xPos, height)\n        this.p.strokeWeight(1)\n\n        this.p.noStroke()\n\n        // Upper bond label \n        this.p.text(Math.round(yRange * 100) + '%', xPos - 45, yPos + 10)\n\n        // Add inbetween steps\n        if (yRange <= 0.2) {\n            this.inbetweenSteps(xPos, width, height, 6, yRange, yPos + 10)\n        } else if (yRange > 0.2 && yRange < 0.4) {\n            this.inbetweenSteps(xPos, width, height, 5, yRange, yPos + 10)\n        } else if (yRange >= 0.4 && yRange < 0.6) {\n            this.inbetweenSteps(xPos, width, height, 4, yRange, yPos + 10)\n        } else if (yRange >= 0.6) {\n            this.inbetweenSteps(xPos, width, height, 3, yRange, yPos + 10)\n        } else if (yRange > 0.6) {\n            this.inbetweenSteps(xPos, width, height, 2, yRange, yPos + 10)\n        }\n\n        this.p.stroke(0)\n    }\n\n    inbetweenSteps = (xPos, width, height, n, yRange, upperBond) => {\n        for (let i = 0; i < n; i++) {\n            // Propability of the step\n            let stepProp = Math.round(this.p.map(i, 0, n, 0, yRange) * 1000) / 10\n            let stepPropPos = this.p.map(i, 0, n, height, upperBond)\n\n            this.p.noStroke()\n\n            // Percentage labels\n            this.p.text(stepProp + '%', xPos - 45, stepPropPos)\n\n            this.p.stroke(0)\n\n            // Lines\n            this.p.strokeWeight(0.5)\n            this.p.line(xPos, stepPropPos, xPos + width, stepPropPos)\n            this.p.strokeWeight(1)\n        }\n    }\n}","import createGraph from './createGraph.js'\n\n\nexport default function binomialDistributionGraph(p) {\n\n\tp.myCustomRedrawAccordingToNewPropsHandler = (props) => {\n\t\tlet nVal = parseInt(props.nVal)\n\t\tlet pVal = parseFloat(props.pVal)\n\t\tlet kVal = parseInt(props.kVal)\n\t\tlet slider = props.slider\n\n\t\t// Draw only if valid input\n\t\tif (pVal > 0 && pVal < 1 && nVal > 0 && kVal < nVal && kVal >= 0 && nVal < 150) {\n\t\t\tcreateGraph(nVal, pVal, kVal, p, slider)\n\t\t}\n\t}\n}","import Distribution from '../math/distribution.js';\nimport Bar from '../display/bar.js';\nimport Data from '../display/data.js';\nimport Binomial from '../math/binomial.js';\nimport HoverInfo from '../display/hoverInfo.js';\nimport Labeling from '../display/labeling.js';\n\n// This function handles p.setup and p.draw  \nexport default function createGraph(nValue, pValue, kValue, p, slider) {\n\n    let canvas\n    let nBar, pBar, yRangeBar, kBar\n\n    // Global slider position\n    const sliderYPosition = 360\n\n    let nVal = nValue\n    let pVal = pValue\n    let kVal = kValue\n\n    let yRange = 0.5\n\n    let distributionMath = new Distribution()\n    let binomialMath = new Binomial()\n    let hoverInfo = new HoverInfo([], p)\n    let labeling = new Labeling(p)\n    let dataDisplay = new Data(p, 700, 0, 420, 200)\n\n    canvas = p.createCanvas(900, 420)\n\n\n    // Initialize canvas\n\n    if (slider) {\n        // Initialize slider\n        nBar = p.createSlider(1, 150, nVal, 1)\n        pBar = p.createSlider(0.01, 0.99, pVal, 0.01)\n        kBar = p.createSlider(0, 149, kVal, 1)\n\n        // Set slider\n        nBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition)\n        pBar.position(700 - pBar.width - 20 + canvas.position().x, canvas.position().y + sliderYPosition)\n        kBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition + 40)\n    }\n\n    yRangeBar = p.createSlider(0.01, 1, yRange, 0.01)\n    yRangeBar.position(700 / 2 - yRangeBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n\n\n    // Draw the graph and calculate all constants\n    p.draw = () => {\n\n        if (typeof yRangeBar === 'undefined') {\n            canvas = p.createCanvas(900, 420)\n            yRangeBar = p.createSlider(0.01, 1, yRange, 0.01)\n            yRangeBar.position(700 / 2 - yRangeBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n        }\n\n        // Reset screen\n        p.background(240)\n\n        // Array with all bars\n        let bars = []\n\n\n        if (slider) {\n            // Get values from the sliders\n            nVal = nBar.value()\n            pVal = pBar.value()\n\n            // If slider value < nVal else stack overflow\n            if (kBar.value() < nVal) {\n                kVal = kBar.value()\n            } else {\n                kVal = nVal -1\n            }\n        }\n\n        yRange = yRangeBar.value()\n\n        // temp Variables \n        let mu = distributionMath.expectedValue(nVal, pVal)\n        let sigma = distributionMath.standardDeviation(nVal, pVal)\n        let variace = distributionMath.variance(nVal, pVal)\n        let mostCommonValues = binomialMath.binomMostCommon(nVal, pVal, sigma, mu)\n\n        // Create labels for data \t\t\n        dataDisplay.addLabel(\"μ\", mu)\n        dataDisplay.addLabel(\"P(μ)\", binomialMath.bDistribution(nVal, pVal, Math.round(mu)))\n        dataDisplay.addLabel(\"P(X=k)\", binomialMath.bDistribution(nVal, pVal, kVal))\n        dataDisplay.addLabel(\"σ\", sigma)\n        dataDisplay.addLabel(\"σ²\", variace)\n        dataDisplay.addLabel(\"[μ±σ]\", '[' + Math.ceil(mu - sigma) + ':' + Math.floor(mu + sigma) + ']')\n        dataDisplay.addLabel(\"P([μ±σ])\", mostCommonValues)\n\n        // Display dataDisplay \n        dataDisplay.display()\n\n        // Set fill back\n        p.fill(0)\n\n        // Highest propability\n        let highestProp = binomialMath.bDistribution(nVal, pVal, Math.floor(mu))\n\n        if (binomialMath.bDistribution(nVal, pVal, Math.ceil(mu)) > highestProp) {\n            highestProp = binomialMath.bDistribution(nVal, pVal, Math.ceil(mu))\n        }\n\n        labeling.labelYAxis(50, 30, 600, 300, highestProp, yRange)\n\n        // Generate bars\n        for (let i = 0; i < nVal; i++) {\n            bars[i] = new Bar(50 + p.map(i, 0, nVal, 0, 600), 300, 600 / nVal, 0, 0, i)\n\n            let currentPropability = binomialMath.bDistribution(nVal, pVal, i)\n\n            // 300 - 30 because of the xPos margin\n            let absHeight = p.map(currentPropability, 0, yRange, 0, 300 - 30)\n            bars[i].height = absHeight\n            bars[i].prop = currentPropability\n\n            if (kVal === i) {\n                bars[i].display(p, '#22919D')\n            } else {\n                bars[i].display(p, 255)\n            }\n\n\n            labeling.labelXAxis(nVal, i, bars[i].xPos + bars[i].width / 2, bars[i].yPos + 20)\n        }\n\n\n        // Hovering \n        hoverInfo.bars = bars\n        hoverInfo.showHoverWindow()\n\n        p.noStroke()\n\n        if (slider) {\n            // Print bar values \n            p.text('n = ' + nVal, 20, sliderYPosition - 10)\n            p.text('p = ' + Math.round(pVal * 100) + '%', 700 - pBar.width - 20, sliderYPosition - 10)\n            p.text('k = ' + kVal, 20, sliderYPosition + 30)\n        }\n        p.text('yRange = ' + Math.round(yRange * 100) + '%', 700 / 2 - yRangeBar.width / 2, sliderYPosition - 10)\n    }\n\n    // Make sure the sliders are in place\n    p.windowResized = () => {\n        if (slider) {\n            nBar.position(20 + canvas.position().x, canvas.position().y + canvas.height + sliderYPosition)\n            pBar.position(700 - pBar.width - 20 + canvas.position().x, canvas.position().y + sliderYPosition)\n            kBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition + 40)\n        }\n        yRangeBar.position(700 / 2 - yRangeBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n    }\n\n}\n","export default class Normal {\n    \n    solve = (x, sD, eV) => {\n        // Calculate the coefficient \n        let coef = 1 / (Math.sqrt(2 * Math.PI * Math.pow(sD, 2)))\n\n        // Calculate the power \n        let power = -(Math.pow(x - eV, 2)) / (2 * Math.pow(sD, 2))\n\n        return coef * Math.pow(Math.E, power)\n    }\n\n    // Calculates the cumulated propability of the most common values \n    // -> expectedValue +/- standard deviation\n    mostCommonValues = (sD, eV) => {\n        let sum = 0\n        \n        const factor = 0.01\n\n        for(let i = (eV-sD); i<=(sD + eV); i+=factor) {\n            sum += this.solve(i, sD, eV) * factor\n        }\n\n        return sum\n    }\n}","import createGraph from './createGraph.js';\n\n\nexport default function normalDistributionGraph(p) {\n\n\tp.myCustomRedrawAccordingToNewPropsHandler = (props) => {\n\t\tlet nVal = parseInt(props.nVal)\n\t\tlet pVal = parseFloat(props.pVal)\n\t\tlet kVal = parseInt(props.kVal)\n\t\tlet slider = props.slider\n\n\t\tlet limit = 50001\n\n\t\t// Draw only if valid input\n\t\tif (pVal > 0 && pVal < 1 && nVal > 0 && kVal < nVal && kVal >= 0 && nVal >= 100 && nVal < limit) {\n\t\t\tcreateGraph(nVal, pVal, kVal, p, slider)\n\t\t}\n\t}\n}","import Distribution from '../math/distribution.js';\nimport Data from '../display/data.js';\nimport Normal from '../math/normal.js';\nimport HoverInfo from '../display/hoverInfo.js';\nimport Labeling from '../display/labeling.js';\n\n// This function handles p.setup and p.draw  \nexport default function createGraph(nValue, pValue, kValue, p, slider) {\n\n    let canvas\n    let nBar, pBar, yRangeBar, kBar\n\n    // Global slider position\n    \n    let nVal = nValue\n    let pVal = pValue\n    let kVal = kValue\n    \n    let yRange = 0.5\n\n    let distributionMath = new Distribution()\n    let normalMath = new Normal()\n    let hoverInfo = new HoverInfo([], p)\n    let labeling = new Labeling(p)\n    let dataDisplay = new Data(p, 700, 0, 420, 200)\n    \n    // Initialize canvas\n    canvas = p.createCanvas(900, 420)\n\n    const sliderYPosition = 360\n\n    if (slider) {\n        // Initialize slider\n        nBar = p.createSlider(1, 150, nVal, 1)\n        pBar = p.createSlider(0.01, 0.99, pVal, 0.01)\n        kBar = p.createSlider(0, 150-1, 1)\n\n        // Set slider\n        nBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition)\n        pBar.position(700 - pBar.width - 20 + canvas.position().x, canvas.position().y + sliderYPosition)\n        kBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition + 40)\n    }\n\n    yRangeBar = p.createSlider(0.01, 1, yRange, 0.01)\n    yRangeBar.position(700 / 2 - yRangeBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n\n    // Draw the graph and calculate all constants\n    p.draw = () => {\n\n        if (typeof yRangeBar === 'undefined') {\n            canvas = p.createCanvas(900, 420)\n            yRangeBar = p.createSlider(0.01, 1, yRange, 0.01)\n            yRangeBar.position(700 / 2 - yRangeBar.width / 2  + canvas.position().x, canvas.position().y + sliderYPosition)\n        }\n\n        // Reset screen\n        p.background(240)\n\n\n        if (slider) {\n            \n            // Get values from the sliders\n            nVal = nBar.value()\n            pVal = pBar.value()\n            \n            if (kBar.value() > nVal) {\n                kVal = nVal - 1\n            } else {\n                kVal = kBar.value()\n            }\n        }\n\n        yRange = yRangeBar.value()\n\n        // temp Variables \n        let mu = distributionMath.expectedValue(nVal, pVal)\n        let sigma = distributionMath.standardDeviation(nVal, pVal)\n        let variace = distributionMath.variance(nVal, pVal)\n        let mostCommonValues = normalMath.mostCommonValues(sigma, mu)\n\n        // Create labels for data \t\t\n        dataDisplay.addLabel(\"μ\", mu)\n        dataDisplay.addLabel(\"P(μ)\", normalMath.solve(mu, sigma, mu))\n        dataDisplay.addLabel(\"P(X=k)\", normalMath.solve(kVal, sigma, mu))\n        dataDisplay.addLabel(\"σ\", sigma)\n        dataDisplay.addLabel(\"σ²\", variace)\n        dataDisplay.addLabel(\"[μ±σ]\", '[' + Math.ceil(mu - sigma) + ':' + Math.floor(mu + sigma) + ']')\n        dataDisplay.addLabel(\"P([μ±σ])\", mostCommonValues)\n\n        // Display dataDisplay \n        dataDisplay.display()\n\n        // Set fill back\n        p.fill(0)\n\n        let highestProp = normalMath.solve(mu, sigma, mu)\n        labeling.labelYAxis(50, 30, 600, 300, highestProp, yRange)\n\n        p.strokeWeight(2)\n        p.stroke(255, 0, 0)\n\n        const sublines = 600\n\n        // plot function\n        for (let i = 0; i < sublines; i++) {\n\n            let x1 = 50 + i\n            let y1 = 300 - p.map(normalMath.solve(p.map(i, 0, 600, 0, nVal), sigma, mu), 0, yRange, 0, 300 - 30)\n            let x2 = 50 + i + 1\n            let y2 = 300 - p.map(normalMath.solve(p.map(i + 1, 0, 600, 0, nVal), sigma, mu), 0, yRange, 0, 300 - 30)\n\n            p.line(x1, y1, x2, y2)\n\n            // Mark k \n            if (i === kVal && kVal <= nVal) {\n                p.stroke('#ada')\n                p.strokeWeight(1)\n\n                p.line(50 + p.map(kVal, 0, nVal, 0, 600), 300, 50 + p.map(kVal, 0, nVal, 0, 600), 30)\n\n                p.stroke(255, 0, 0)\n                p.strokeWeight(2)\n            }\n        }\n        p.stroke(0)\n        p.strokeWeight(1)\n\n        labeling.xAxisNormal(50, 300, 600, nVal)\n\n\n        let hoverMousePos = p.map(p.mouseX, 50, 650, 0, nVal)\n        hoverInfo.showHoverWindowNormal(hoverMousePos, normalMath.solve(hoverMousePos, sigma, mu))\n\n        p.noStroke()\n\n        if (slider) {\n            // Print bar values \n            p.text('n = ' + nVal, 20, sliderYPosition - 10)\n            p.text('p = ' + Math.round(pVal * 100) + '%', 700 - pBar.width - 20, sliderYPosition - 10)\n            p.text('k = ' + kVal, 20, sliderYPosition + 30)\n        }\n        p.text('yRange = ' + Math.round(yRange * 100) + '%', 700 / 2 - yRangeBar.width / 2, sliderYPosition - 10)\n    }\n\n    // Make sure the sliders are in place\n    p.windowResized = () => {\n        if (slider) {\n            nBar.position(20 + canvas.position().x, canvas.position().y + canvas.height + sliderYPosition)\n            pBar.position(700 - pBar.width - 20 + canvas.position().x, canvas.position().y + sliderYPosition)\n            kBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition + 40)\n        }\n        yRangeBar.position(700 / 2 - yRangeBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n    }\n\n}\n","import createGraph from './createGraph.js'\n\nexport default function cumulatedBinomialDistributionGraph(p) {\n\n\tp.myCustomRedrawAccordingToNewPropsHandler = (props) => {\n\t\tlet nVal = parseInt(props.nVal)\n\t\tlet pVal = parseFloat(props.pVal)\n\t\tlet kVal = parseInt(props.kVal)\n\t\tlet slider = props.slider\n\n\t\t// Draw only if valid input\n\t\tif (pVal > 0 && pVal < 1 && nVal > 0 && kVal < nVal && kVal >= 0 && nVal < 150) {\n\t\t\tcreateGraph(nVal, pVal, kVal, p, slider)\n\t\t}\n\t}\n}","import Distribution from '../math/distribution.js';\nimport Bar from '../display/bar.js';\nimport Data from '../display/data.js';\nimport Binomial from '../math/binomial.js';\nimport HoverInfo from '../display/hoverInfo.js';\nimport Labeling from '../display/labeling.js';\n\n\nexport default function createGraph(nValue, pValue, kValue, p, slider) {\n    let canvas\n    let nBar, pBar, kBar\n\n    // Global slider position\n    const sliderYPosition = 360\n\n    let nVal = nValue\n    let pVal = pValue\n    let kVal = kValue\n\n    let distributionMath = new Distribution()\n    let binomialMath = new Binomial()\n    let hoverInfo = new HoverInfo([], p)\n    let labeling = new Labeling(p)\n    let dataDisplay = new Data(p, 700, 0, 400, 200)\n\n\n\n    // Initialize canvas\n    canvas = p.createCanvas(900, 400)\n\n    if (slider) {\n        // Initialize slider\n        nBar = p.createSlider(1, 150, nVal, 1)\n        pBar = p.createSlider(0.01, 0.99, pVal, 0.01)\n        kBar = p.createSlider(0, 149, kVal, 1)\n\n        // Set slider\n        nBar.position(20 + canvas.position().x, canvas.position().y + sliderYPosition)\n        pBar.position(700 - pBar.width - 20 + canvas.position().x, canvas.position().y + sliderYPosition)\n        kBar.position(700 / 2 - kBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n    }\n\n\n    p.draw = () => {\n\n        // Reset screen\n        p.background(240)\n\n        // Array with all bars\n        let bars = []\n\n        if (slider) {\n\n            // Get values from the sliders\n            nVal = nBar.value()\n            pVal = pBar.value()\n\n            if (kBar.value() < nVal) {\n                kVal = kBar.value()\n            } else {\n                kVal = nVal -1\n            }\n        }\n\n        // Create labels for data \t\t\n        dataDisplay.addLabel(\"μ\", distributionMath.expectedValue(nVal, pVal))\n        dataDisplay.addLabel(\"P(X ≤ k)\", binomialMath.cumulatedBinom(nVal, pVal, kVal))\n        dataDisplay.addLabel(\"σ\", distributionMath.standardDeviation(nVal, pVal))\n        dataDisplay.addLabel(\"σ²\", distributionMath.variance(nVal, pVal))\n\n        // Display dataDisplay \n        dataDisplay.display()\n\n        // Set fill back\n        p.fill(0)\n\n\n        // cumulated propability\n        let propSum = 0\n\n        // Generate bars\n        for (let i = 0; i < nVal; i++) {\n            let currentPropability = binomialMath.bDistribution(nVal, pVal, i)\n\n            bars[i] = new Bar(50 + p.map(i, 0, nVal, 0, 600), 300, 600 / nVal, 0, 0, i)\n\n            propSum += currentPropability\n\n            // Calculate, set and display bar's hight\n            let absHeight = p.map(propSum, 0, 1, 0, 200)\n            bars[i].height = absHeight\n            bars[i].prop = propSum\n\n            if (kVal === i) {\n                bars[i].display(p, '#22919D')\n            } else {\n                bars[i].display(p, 255)\n            }\n\n            labeling.labelXAxis(nVal, i, bars[i].xPos + bars[i].width / 2, bars[i].yPos + 20)\n        }\n\n        hoverInfo.bars = bars\n        hoverInfo.showHoverWindow()\n\n        p.noStroke()\n\n        if (slider) {\n            // Print bar values \n            p.text('n = ' + nVal, 20, sliderYPosition - 10)\n            p.text('p = ' + Math.round(pVal * 100) + '%', 700 - pBar.width - 20, sliderYPosition - 10)\n            p.text('k = ' + kVal, 700 / 2 - kBar.width / 2, sliderYPosition - 10)\n        }\n    }\n\n    // Make sure the sliders are in place\n    p.windowResized = () => {\n        if (slider) {\n            nBar.position(20 + canvas.position().x, canvas.position().y + canvas.height + sliderYPosition)\n            pBar.position(700 - pBar.width - 20 + canvas.position().x, canvas.position().y + sliderYPosition)\n            kBar.position(700 / 2 - kBar.width / 2 + canvas.position().x, canvas.position().y + sliderYPosition)\n        }\n    }\n}","import React from 'react';\nimport \"../assets/style/menu.css\"\n\nexport default class Menu extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            render: ''\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div>\n                    <div className=\"container row middle\">\n                        <h1 className=\"menu-header\">{this.props.name}</h1>\n                    </div>\n                    <div className=\"container row\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}","import React from 'react';\n\nexport default class MenuElement extends React.Component {\n    render() {\n        return (\n            <button onClick={this.props.onClick}>{this.props.children}</button>\n        )\n    }\n\n}","import React, { useState } from 'react';\nimport SketchOnly from './components/sketchOnly.js';\nimport FromToCalculate from './components/formToCalculate.js';\nimport binomialDistributionGraph from './binomial/graph.js'\nimport normalDistributionGraph from './normal/graph.js'\nimport cumulatedBinomialDistributionGraph from './cBinomial/graph.js'\nimport Menu from './components/menu.js'\nimport MenuElement from './components/menuElement';\nimport './assets/style/main.css';\n\nconst App = () => {\n\n\tlet [pgNormal, setPgNormal] = useState(Boolean)\n\tlet [pgBinom, setPgBinom] = useState(Boolean)\n\tlet [pgcBinom, setPgcBinom] = useState(Boolean)\n\n\tlet [formNormal, setFormNormal] = useState(Boolean)\n\tlet [formBinom, setFormBinom] = useState(Boolean)\n\tlet [formcBinom, setFormcBinom] = useState(Boolean)\n\n\tconst resetAllStateVariables = () => {\n\t\tsetPgBinom(false)\n\t\tsetPgNormal(false)\n\t\tsetPgcBinom(false)\n\n\t\tsetFormBinom(false)\n\t\tsetFormNormal(false)\n\t\tsetFormcBinom(false)\n\t}\n\n\n\tconst handleOnclick = (compName) => {\n\t\tconsole.log(compName)\n\n\t\tswitch (compName) {\n\t\t\tcase 'pgNormal':\n\t\t\t\tresetAllStateVariables()\n\t\t\t\tsetPgNormal(true)\n\t\t\t\tbreak\n\t\t\tcase 'pgBinom':\n\t\t\t\tresetAllStateVariables()\n\t\t\t\tsetPgBinom(true)\n\t\t\t\tbreak\n\t\t\tcase 'pgCBinom':\n\t\t\t\tresetAllStateVariables()\n\t\t\t\tsetPgcBinom(true)\n\t\t\t\tbreak\n\n\t\t\tcase 'formNormal':\n\t\t\t\tresetAllStateVariables()\n\t\t\t\tsetFormNormal(true)\n\t\t\t\tbreak\n\t\t\tcase 'formBinom':\n\t\t\t\tresetAllStateVariables()\n\t\t\t\tsetFormBinom(true)\n\t\t\t\tbreak\n\t\t\tcase 'formCBinom':\n\t\t\t\tresetAllStateVariables()\n\t\t\t\tsetFormcBinom(true)\n\t\t\t\tbreak\n\t\t\tdefault: \n\t\t\tresetAllStateVariables()\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t<div className=\"main\">\n\t\t\t<h1>Stochastik - Rechner</h1>\n\n\t\t\t{pgNormal && <SketchOnly sketch={normalDistributionGraph} nVal={120} kVal={70} pVal={0.4} />}\n\t\t\t{pgBinom && <SketchOnly sketch={binomialDistributionGraph} nVal={120} kVal={70} pVal={0.4} />}\n\t\t\t{pgcBinom && <SketchOnly sketch={cumulatedBinomialDistributionGraph} nVal={120} kVal={70} pVal={0.4} />}\n\n\t\t\t{formBinom && <FromToCalculate sketch={binomialDistributionGraph} eqType=\"binom\" nVal={120} kVal={70} pVal={0.4} />}\n\t\t\t{formcBinom && <FromToCalculate sketch={cumulatedBinomialDistributionGraph} eqType=\"cBinom\" nVal={120} kVal={70} pVal={0.4} />}\n\t\t\t{formNormal && <FromToCalculate sketch={normalDistributionGraph} eqType=\"normal\" nVal={120} kVal={70} pVal={0.4} />}\n\n\t\t\t<Menu className=\"container row\">\n\t\t\t\t<Menu name=\"Playground\">\n\t\t\t\t\t<MenuElement onClick={handleOnclick.bind(this, 'pgNormal')}> Normalverteilung </MenuElement>\n\t\t\t\t\t<MenuElement onClick={handleOnclick.bind(this, 'pgBinom')}> Binomialverteilung </MenuElement>\n\t\t\t\t\t<MenuElement onClick={handleOnclick.bind(this, 'pgCBinom')}> kumulierte Binomialverteilung </MenuElement>\n\t\t\t\t</Menu>\n\n\t\t\t\t<Menu name=\"Berechnen\">\n\t\t\t\t\t<MenuElement onClick={handleOnclick.bind(this, 'formNormal')}> Normalverteilung </MenuElement>\n\t\t\t\t\t<MenuElement onClick={handleOnclick.bind(this, 'formBinom')}> Binomialverteilung </MenuElement>\n\t\t\t\t\t<MenuElement onClick={handleOnclick.bind(this, 'formCBinom')}> kumulierte Binomialverteilung </MenuElement>\n\t\t\t\t</Menu>\n\t\t\t</Menu>\n\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}